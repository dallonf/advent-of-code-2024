 0: bst A -- B = A % 8
 1: bxl 1 -- B = xor(B, 1)
 2: cdv B -- C = A / pow(2, B)
 3: bxl 5 -- B = xor(B, 5)
 4: bxc   -- B = xor(B, C)
 5: adv 3 -- A = A / pow(2, 3)
 6: out B -- output(B % 8)
 7: jnz 0 -- goto 0 if A != 0

B = xor(A % 8, 1)
C = A / pow(2, B)
B = xor(xor(B, 5), C)
A = A / 8
output(B % 8)
loop if A != 0

XOR 1: if even, adds 1; if odd, subtracts 1
0 ^ 1 = 1
1 ^ 1 = 0
2 ^ 1 = 3
3 ^ 1 = 2
4 ^ 1 = 5
5 ^ 1 = 4
6 ^ 1 = 7
7 ^ 1 = 6
symmetrical: (x ^ 1) ^ 1 == x


manual run:
A == 30344604 == 0o163602634
actual 4,3,2,6,4,5,3,2,4

B = xor(30344604 % 8, 1) = xor(4, 1) = 5
C = 30344604 / pow(2, 5) = 30344604 / 32 = 948268
B = xor(xor(B, 5), C) = xor(xor(5, 5), 948268) = xor(0, 948268) = 948268
A = 30344604 / 8 = 3793075
output(948268 % 8 == 4)
loop if A != 0
